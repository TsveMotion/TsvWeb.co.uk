"use client"

import { useState, useEffect } from 'react'
import AdminLayout from '@/components/admin/admin-layout'

interface Inquiry {
  _id: string
  name: string
  email: string
  message: string
  subject?: string
  phone?: string
  createdAt: string
  status: 'new' | 'read' | 'replied' | 'archived'
}

export default function AdminInquiries() {
  const [inquiries, setInquiries] = useState<Inquiry[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState<'all' | 'new' | 'read' | 'replied' | 'archived'>('all')
  
  // Reply modal state
  const [isReplyModalOpen, setIsReplyModalOpen] = useState(false)
  const [replyInquiry, setReplyInquiry] = useState<Inquiry | null>(null)
  const [replyMessage, setReplyMessage] = useState('')
  const [isSendingReply, setIsSendingReply] = useState(false)
  const [replyError, setReplyError] = useState('')

  const fetchInquiries = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/admin/inquiries')
      const data = await response.json()
      
      if (response.ok && data.success && data.data) {
        setInquiries(data.data)
      } else {
        console.error('Error in API response:', data)
        // Use mock data only if API fails completely
        setInquiries([
          {
            _id: '1',
            name: 'John Doe',
            email: 'john@example.com',
            message: 'I would like to discuss a potential project for my company website.',
            subject: 'Project Inquiry',
            createdAt: '2025-07-25T10:30:00Z',
            status: 'new'
          },
          {
            _id: '2',
            name: 'Jane Smith',
            email: 'jane@example.com',
            message: 'Could you provide a quote for an e-commerce website with about 50 products?',
            subject: 'Quote Request',
            createdAt: '2025-07-24T14:15:00Z',
            status: 'read'
          }
        ])
      }
    } catch (error) {
      console.error('Error fetching inquiries:', error)
      // Use mock data for demo/development
      setInquiries([
        {
          _id: '1',
          name: 'John Doe',
          email: 'john@example.com',
          message: 'I would like to discuss a potential project for my company website.',
          subject: 'Project Inquiry',
          createdAt: '2025-07-25T10:30:00Z',
          status: 'new'
        },
        {
          _id: '2',
          name: 'Jane Smith',
          email: 'jane@example.com',
          message: 'Could you provide a quote for an e-commerce website with about 50 products?',
          subject: 'Quote Request',
          createdAt: '2025-07-24T14:15:00Z',
          status: 'read'
        }
      ])
    } finally {
      setIsLoading(false)
    }
  }
  
  useEffect(() => {
    fetchInquiries()
  }, [])

  // Format date to a more readable format
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // Filter inquiries based on search term and status filter
  const filteredInquiries = inquiries.filter((inquiry: Inquiry) => {
    const searchLower = searchTerm.toLowerCase()
    const matchesSearch = 
      searchLower === '' ||
      inquiry.name.toLowerCase().includes(searchLower) ||
      inquiry.email.toLowerCase().includes(searchLower) ||
      (inquiry.subject?.toLowerCase() || '').includes(searchLower) ||
      inquiry.message.toLowerCase().includes(searchLower)
    
    const matchesStatus = statusFilter === 'all' || inquiry.status === statusFilter
    
    return matchesSearch && matchesStatus
  })

  const handleStatusChange = async (id: string, newStatus: 'new' | 'read' | 'replied' | 'archived') => {
    try {
      // Update local state optimistically
      setInquiries(inquiries.map((inquiry: Inquiry) => 
        inquiry._id === id ? { ...inquiry, status: newStatus } : inquiry
      ))
      
      // Call the API to update the status
      const response = await fetch(`/api/admin/inquiries/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.message || 'Failed to update status')
      }
    } catch (error) {
      console.error('Error updating inquiry status:', error)
      // Revert the optimistic update if there was an error
      fetchInquiries()
    }
  }

  const handleDeleteInquiry = async (id: string) => {
    if (confirm('Are you sure you want to delete this inquiry?')) {
      try {
        // Update local state optimistically
        setInquiries(inquiries.filter((inquiry: Inquiry) => inquiry._id !== id))
        
        // Call the API to delete the inquiry
        const response = await fetch(`/api/admin/inquiries/${id}`, {
          method: 'DELETE',
        })
        
        if (!response.ok) {
          const errorData = await response.json()
          throw new Error(errorData.message || 'Failed to delete inquiry')
        }
      } catch (error) {
        console.error('Error deleting inquiry:', error)
        // Revert the optimistic update if there was an error
        fetchInquiries()
      }
    }
  }

  const handleReplyInquiry = (id: string) => {
    const inquiry = inquiries.find((inq: Inquiry) => inq._id === id)
    if (inquiry) {
      setReplyInquiry(inquiry)
      setReplyMessage('')
      setReplyError('')
      setIsReplyModalOpen(true)
    }
  }
  
  const handleSendReply = async () => {
    if (!replyInquiry || !replyMessage.trim()) {
      setReplyError('Reply message is required')
      return
    }
    
    setIsSendingReply(true)
    setReplyError('')
    
    try {
      const response = await fetch(`/api/admin/inquiries/${replyInquiry._id}/reply`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: replyMessage,
          subject: `Re: ${replyInquiry.subject || 'Your Inquiry'}`
        }),
      })
      
      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to send reply')
      }
      
      // Update inquiry status in local state
      setInquiries(inquiries.map((inquiry: Inquiry) => 
        inquiry._id === replyInquiry._id ? { ...inquiry, status: 'replied' } : inquiry
      ))
      
      setIsReplyModalOpen(false)
      alert('Reply sent successfully!')
    } catch (error: any) {
      setReplyError(error.message || 'Failed to send reply')
    } finally {
      setIsSendingReply(false)
    }
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Contact Inquiries</h1>
        </div>
        
        {/* Filters */}
        <div className="bg-white dark:bg-gray-800 shadow px-4 py-5 sm:rounded-lg sm:p-6">
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            <div>
              <label htmlFor="search" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Search
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
                <input
                  type="text"
                  name="search"
                  id="search"
                  className="focus:ring-royal-blue focus:border-royal-blue block w-full pl-10 sm:text-sm border-gray-300 dark:border-gray-700 dark:bg-gray-700 dark:text-white rounded-md"
                  placeholder="Search inquiries..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Status
              </label>
              <select
                id="status"
                name="status"
                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-700 dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-royal-blue focus:border-royal-blue sm:text-sm rounded-md"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value as 'all' | 'new' | 'read' | 'replied' | 'archived')}
              >
                <option value="all">All</option>
                <option value="new">New</option>
                <option value="read">Read</option>
                <option value="replied">Replied</option>
                <option value="archived">Archived</option>
              </select>
            </div>
          </div>
        </div>

        {/* Inquiries Table */}
        <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg">
          {isLoading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-royal-blue"></div>
            </div>
          ) : filteredInquiries.length === 0 ? (
            <div className="text-center py-12">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">No inquiries found</h3>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                {searchTerm || statusFilter !== 'all' ? 'Try adjusting your search or filter' : 'No contact inquiries have been received yet'}
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Contact
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Subject/Message
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Date
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Status
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {filteredInquiries.map((inquiry: Inquiry) => (
                    <tr key={inquiry._id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div>
                            <div className="text-sm font-medium text-gray-900 dark:text-white">
                              {inquiry.name}
                            </div>
                            <div className="text-sm text-gray-500 dark:text-gray-400">
                              <a href={`mailto:${inquiry.email}`} className="hover:text-royal-blue">
                                {inquiry.email}
                              </a>
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div>
                          {inquiry.subject && (
                            <div className="text-sm font-medium text-gray-900 dark:text-white">
                              {inquiry.subject}
                            </div>
                          )}
                          <div className="text-sm text-gray-500 dark:text-gray-400 line-clamp-2">
                            {inquiry.message}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {formatDate(inquiry.createdAt)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          inquiry.status === 'new' 
                            ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' 
                            : inquiry.status === 'read'
                              ? 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100'
                              : inquiry.status === 'replied'
                                ? 'bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100'
                                : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
                        }`}>
                          {inquiry.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex space-x-3 justify-end">
                          <div className="relative inline-block text-left">
                            <select
                              value={inquiry.status}
                              onChange={(e) => handleStatusChange(inquiry._id, e.target.value as 'new' | 'read' | 'replied' | 'archived')}
                              className="block w-full pl-3 pr-10 py-1 text-xs border-gray-300 dark:border-gray-700 dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-royal-blue focus:border-royal-blue rounded-md"
                            >
                              <option value="new">New</option>
                              <option value="read">Read</option>
                              <option value="replied">Replied</option>
                              <option value="archived">Archived</option>
                            </select>
                          </div>
                          <button
                            onClick={() => handleReplyInquiry(inquiry._id)}
                            className="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300 mr-2"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
                            </svg>
                          </button>
                          <button
                            onClick={() => handleDeleteInquiry(inquiry._id)}
                            className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Reply Modal */}
      {isReplyModalOpen && replyInquiry && (
        <div className="fixed inset-0 z-10 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>

            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div className="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
                      Reply to {replyInquiry.name}
                    </h3>
                    <div className="mt-2">
                      <div className="mb-4">
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          <strong>Email:</strong> {replyInquiry.email}
                        </p>
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          <strong>Subject:</strong> {replyInquiry.subject || 'No subject'}
                        </p>
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          <strong>Original message:</strong>
                        </p>
                        <p className="text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-700 p-2 rounded mt-1">
                          {replyInquiry.message}
                        </p>
                      </div>
                      <div>
                        <label htmlFor="reply-message" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                          Your Reply
                        </label>
                        <div className="mt-1">
                          <textarea
                            id="reply-message"
                            name="reply-message"
                            rows={5}
                            className="shadow-sm focus:ring-royal-blue focus:border-royal-blue block w-full sm:text-sm border-gray-300 dark:border-gray-700 dark:bg-gray-700 dark:text-white rounded-md"
                            placeholder="Type your reply here..."
                            value={replyMessage}
                            onChange={(e) => setReplyMessage(e.target.value)}
                          ></textarea>
                        </div>
                        {replyError && (
                          <p className="mt-2 text-sm text-red-600 dark:text-red-500">{replyError}</p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-royal-blue text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-royal-blue sm:ml-3 sm:w-auto sm:text-sm ${
                    isSendingReply ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                  onClick={handleSendReply}
                  disabled={isSendingReply}
                >
                  {isSendingReply ? 'Sending...' : 'Send Reply'}
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-royal-blue sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setIsReplyModalOpen(false)}
                  disabled={isSendingReply}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </AdminLayout>
  )
}
