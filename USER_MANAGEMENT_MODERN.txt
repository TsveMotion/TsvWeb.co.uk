// COPY THIS ENTIRE FILE TO: src/app/admin/users/page.tsx

"use client"

import { useState, useEffect } from 'react'
import withAdminAuth from '@/components/admin/with-admin-auth'
import {
  UserGroupIcon,
  UserPlusIcon,
  PencilIcon,
  TrashIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  CheckCircleIcon,
  XCircleIcon,
  ClockIcon,
  CalendarIcon,
  BuildingOfficeIcon,
  GlobeAltIcon,
  ShieldCheckIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline'

interface User {
  id: string
  name: string
  email: string
  username: string
  phone?: string
  role: string
  createdAt: string
  lastLogin?: string
  status: 'active' | 'inactive' | 'pending'
  websites?: string[]
  company?: string
}

function UserAdmin() {
  const [users, setUsers] = useState<User[]>([])
  const [filteredUsers, setFilteredUsers] = useState<User[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false)
  const [userToDelete, setUserToDelete] = useState<User | null>(null)
  const [currentUser, setCurrentUser] = useState<User | null>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [roleFilter, setRoleFilter] = useState('all')
  const [statusFilter, setStatusFilter] = useState('all')
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    username: '',
    phone: '',
    role: 'customer',
    password: '',
    confirmPassword: '',
    status: 'active',
    websites: '',
    company: ''
  })

  useEffect(() => {
    fetchUsers()
  }, [])

  // Filter users
  useEffect(() => {
    let filtered = users

    if (searchTerm) {
      filtered = filtered.filter(user =>
        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.username?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (roleFilter !== 'all') {
      filtered = filtered.filter(user => user.role === roleFilter)
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(user => user.status === statusFilter)
    }

    setFilteredUsers(filtered)
  }, [users, searchTerm, roleFilter, statusFilter])

  const fetchUsers = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/admin/users')
      const data = await response.json()
      
      if (data.success && data.users) {
        setUsers(data.users)
      } else {
        setError('Failed to load users. Please try again.')
      }
    } catch (error) {
      console.error('Error fetching users:', error)
      setError('An error occurred while loading users.')
    } finally {
      setLoading(false)
    }
  }

  const handleOpenModal = (user: User | null = null) => {
    if (user) {
      setCurrentUser(user)
      setFormData({
        name: user.name,
        email: user.email,
        username: user.username || '',
        phone: user.phone || '',
        role: user.role,
        password: '',
        confirmPassword: '',
        status: user.status,
        websites: user.websites ? user.websites.join(', ') : '',
        company: user.company || ''
      })
    } else {
      setCurrentUser(null)
      setFormData({
        name: '',
        email: '',
        username: '',
        phone: '',
        role: 'customer',
        password: '',
        confirmPassword: '',
        status: 'active',
        websites: '',
        company: ''
      })
    }
    setIsModalOpen(true)
  }

  const handleCloseModal = () => {
    setIsModalOpen(false)
    setCurrentUser(null)
  }

  const handleOpenDeleteModal = (user: User) => {
    setUserToDelete(user)
    setIsDeleteModalOpen(true)
  }

  const handleCloseDeleteModal = () => {
    setUserToDelete(null)
    setIsDeleteModalOpen(false)
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.name || !formData.email || !formData.username || !formData.role) {
      setError('Please fill in all required fields')
      return
    }
    
    if (!currentUser && (!formData.password || formData.password.length < 8)) {
      setError('Password must be at least 8 characters long')
      return
    }
    
    if (!currentUser && formData.password !== formData.confirmPassword) {
      setError('Passwords do not match')
      return
    }
    
    setError('')
    
    try {
      const url = currentUser 
        ? `/api/admin/users/${currentUser.id}` 
        : '/api/admin/users'
      
      const method = currentUser ? 'PUT' : 'POST'
      
      const { confirmPassword, ...payloadData } = formData;
      
      const payload = {
        ...payloadData,
        websites: formData.websites ? formData.websites.split(',').map(w => w.trim()).filter(w => w) : [],
        company: formData.company || '',
        ...(formData.password || !currentUser ? { password: formData.password } : {})
      }
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      })
      
      const data = await response.json()
      
      if (data.success) {
        setSuccess(currentUser ? 'User updated successfully!' : 'User created successfully!')
        handleCloseModal()
        fetchUsers()
      } else {
        setError(data.message || 'Failed to save user. Please try again.')
      }
    } catch (error) {
      console.error('Error saving user:', error)
      setError('An error occurred while saving user.')
    }
  }

  const handleDeleteUser = async () => {
    if (!userToDelete) return
    
    try {
      const response = await fetch(`/api/admin/users/${userToDelete.id}`, {
        method: 'DELETE'
      })
      
      const data = await response.json()
      
      if (data.success) {
        setSuccess('User deleted successfully!')
        fetchUsers()
        handleCloseDeleteModal()
      } else {
        setError(data.message || 'Failed to delete user. Please try again.')
      }
    } catch (error) {
      console.error('Error deleting user:', error)
      setError('An error occurred while deleting user.')
    }
  }

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'admin': return 'from-red-500 to-red-600'
      case 'editor': return 'from-purple-500 to-purple-600'
      case 'customer': return 'from-blue-500 to-blue-600'
      default: return 'from-gray-500 to-gray-600'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 dark:from-green-900/30 dark:to-emerald-900/30 dark:text-green-300'
      case 'pending': return 'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800 dark:from-yellow-900/30 dark:to-amber-900/30 dark:text-yellow-300'
      default: return 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 dark:from-gray-700 dark:to-gray-600 dark:text-gray-300'
    }
  }

  const activeUsers = users.filter(u => u.status === 'active').length
  const pendingUsers = users.filter(u => u.status === 'pending').length

  return (
    <div className="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <div className="flex items-center gap-3 mb-2">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl">
              <UserGroupIcon className="h-8 w-8 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white">User Management</h1>
            </div>
          </div>
          <p className="text-gray-600 dark:text-gray-400 ml-14">
            Manage system users and their permissions
          </p>
        </div>
        <button
          type="button"
          onClick={() => handleOpenModal()}
          className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
        >
          <UserPlusIcon className="h-5 w-5" />
          Add User
        </button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Total Users */}
        <div className="relative overflow-hidden bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl shadow-xl p-6 text-white">
          <div className="absolute top-0 right-0 -mt-4 -mr-4 h-24 w-24 rounded-full bg-white/10 blur-2xl"></div>
          <div className="relative">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-white/20 rounded-xl backdrop-blur-sm">
                <UserGroupIcon className="h-8 w-8" />
              </div>
              <ChartBarIcon className="h-6 w-6 opacity-50" />
            </div>
            <h3 className="text-sm font-medium opacity-90 mb-1">Total Users</h3>
            <p className="text-4xl font-bold">{users.length}</p>
            <p className="text-xs opacity-75 mt-2">All system users</p>
          </div>
        </div>

        {/* Active Users */}
        <div className="relative overflow-hidden bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl shadow-xl p-6 text-white">
          <div className="absolute top-0 right-0 -mt-4 -mr-4 h-24 w-24 rounded-full bg-white/10 blur-2xl"></div>
          <div className="relative">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-white/20 rounded-xl backdrop-blur-sm">
                <CheckCircleIcon className="h-8 w-8" />
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold">
                  {users.length > 0 ? Math.round((activeUsers / users.length) * 100) : 0}%
                </div>
              </div>
            </div>
            <h3 className="text-sm font-medium opacity-90 mb-1">Active</h3>
            <p className="text-4xl font-bold">{activeUsers}</p>
            <p className="text-xs opacity-75 mt-2">Active users</p>
          </div>
        </div>

        {/* Pending Users */}
        <div className="relative overflow-hidden bg-gradient-to-br from-yellow-500 to-amber-600 rounded-2xl shadow-xl p-6 text-white">
          <div className="absolute top-0 right-0 -mt-4 -mr-4 h-24 w-24 rounded-full bg-white/10 blur-2xl"></div>
          <div className="relative">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-white/20 rounded-xl backdrop-blur-sm">
                <ClockIcon className="h-8 w-8" />
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold">
                  {users.length > 0 ? Math.round((pendingUsers / users.length) * 100) : 0}%
                </div>
              </div>
            </div>
            <h3 className="text-sm font-medium opacity-90 mb-1">Pending</h3>
            <p className="text-4xl font-bold">{pendingUsers}</p>
            <p className="text-xs opacity-75 mt-2">Awaiting approval</p>
          </div>
        </div>
      </div>

      {/* Alerts */}
      {error && (
        <div className="bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-800/20 border-l-4 border-red-500 p-4 rounded-r-xl">
          <div className="flex items-center gap-3">
            <XCircleIcon className="h-6 w-6 text-red-600 dark:text-red-400" />
            <p className="text-sm font-medium text-red-800 dark:text-red-200">{error}</p>
          </div>
        </div>
      )}

      {success && (
        <div className="bg-gradient-to-r from-green-50 to-emerald-100 dark:from-green-900/20 dark:to-emerald-800/20 border-l-4 border-green-500 p-4 rounded-r-xl">
          <div className="flex items-center gap-3">
            <CheckCircleIcon className="h-6 w-6 text-green-600 dark:text-green-400" />
            <p className="text-sm font-medium text-green-800 dark:text-green-200">{success}</p>
          </div>
        </div>
      )}

      {/* Search & Filters */}
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6">
        <div className="flex items-center gap-3 mb-4">
          <FunnelIcon className="h-5 w-5 text-blue-600 dark:text-blue-400" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Search & Filters</h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="relative">
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              placeholder="Search users..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            />
          </div>
          <select
            value={roleFilter}
            onChange={(e) => setRoleFilter(e.target.value)}
            className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
          >
            <option value="all">All Roles</option>
            <option value="admin">Admin</option>
            <option value="editor">Editor</option>
            <option value="customer">Customer</option>
            <option value="user">User</option>
          </select>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
          >
            <option value="all">All Status</option>
            <option value="active">✓ Active</option>
            <option value="pending">⏱ Pending</option>
            <option value="inactive">✕ Inactive</option>
          </select>
        </div>
      </div>

      {/* Users Grid */}
      {loading ? (
        <div className="flex flex-col items-center justify-center py-12">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400 font-medium">Loading users...</p>
        </div>
      ) : filteredUsers.length === 0 ? (
        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-12 text-center">
          <UserGroupIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600 dark:text-gray-400 font-medium">No users found</p>
          <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">Try adjusting your filters</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredUsers.map((user) => (
            <div key={user.id} className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-xl transition-all duration-200">
              <div className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <div className={`p-3 bg-gradient-to-br ${getRoleColor(user.role)} rounded-xl text-white font-bold text-lg`}>
                      {user.name.charAt(0).toUpperCase()}
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900 dark:text-white">{user.name}</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{user.email}</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-2 mb-4">
                  <div className="flex items-center gap-2 text-sm">
                    <ShieldCheckIcon className="h-4 w-4 text-gray-400" />
                    <span className="text-gray-600 dark:text-gray-400">@{user.username}</span>
                  </div>
                  {user.company && (
                    <div className="flex items-center gap-2 text-sm">
                      <BuildingOfficeIcon className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-600 dark:text-gray-400">{user.company}</span>
                    </div>
                  )}
                  {user.websites && user.websites.length > 0 && (
                    <div className="flex items-center gap-2 text-sm">
                      <GlobeAltIcon className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-600 dark:text-gray-400">{user.websites.length} website(s)</span>
                    </div>
                  )}
                  <div className="flex items-center gap-2 text-sm">
                    <CalendarIcon className="h-4 w-4 text-gray-400" />
                    <span className="text-gray-600 dark:text-gray-400">
                      {new Date(user.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                </div>

                <div className="flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700">
                  <div className="flex gap-2">
                    <span className={`inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold rounded-full ${getStatusColor(user.status)}`}>
                      {user.status === 'active' ? <CheckCircleIcon className="h-3.5 w-3.5" /> : <ClockIcon className="h-3.5 w-3.5" />}
                      {user.status.charAt(0).toUpperCase() + user.status.slice(1)}
                    </span>
                    <span className={`px-3 py-1.5 text-xs font-semibold rounded-full bg-gradient-to-r ${getRoleColor(user.role)} text-white`}>
                      {user.role}
                    </span>
                  </div>
                  <div className="flex gap-2">
                    <button
                      onClick={() => handleOpenModal(user)}
                      className="p-2 text-blue-600 hover:bg-blue-50 dark:text-blue-400 dark:hover:bg-blue-900/20 rounded-lg transition-colors"
                      title="Edit user"
                    >
                      <PencilIcon className="h-5 w-5" />
                    </button>
                    <button
                      onClick={() => handleOpenDeleteModal(user)}
                      className="p-2 text-red-600 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                      title="Delete user"
                    >
                      <TrashIcon className="h-5 w-5" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Add/Edit Modal - CONTINUES IN NEXT PART... */}
